#!/bin/bash
################################################################################
#                                                                              #
#   Copyright:
#   This Source Code Form is subject to the terms of the Mozilla Public
#   License, v. 2.0. If a copy of the MPL was not distributed with this
#   file, You can obtain one at https://mozilla.org/MPL/2.0/.
#
#   Contributors: Richard Yim*
#
#  *Centre for Cancer
#   Faculty of Medical Sciences
#   Newcastle University
#   UK
#
#   Installation instructions are in README.md
#                                                                              #
################################################################################

#   Prep area
helpfile="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"/stk-helptext.txt
helpstring="Use: 'slurmtk -h' for help."
queuestring='%.8i %.9P %.8u %.2t %.5C %.6b %.11L %j'

#   Check if options parsing is possible. If not, fail with helpful text.
! getopt --test > /dev/null 
if [[ ${PIPESTATUS[0]} -ne 4 ]]; then
    echo 'Error: `getopt --test` failed in this environment.'
    exit 100
fi

################################################################################
#                                                                              #
#   Options parsing (Full disclosure: I'm not entirely sure how this works.
#   Handle this section with care.)
OPTIONS=h
LONGOPTS=help
! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    # e.g. return value is 1
    #  then getopt has complained about wrong arguments to stdout
    exit 102
fi

eval set -- "$PARSED"

#   Set default values for options
h=n

#   Change options based on parsed inputs (I think)
while true; do
    case "$1" in
        -h|--help)
            h=y
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Programming error"
            exit 101
            ;;
    esac
done

#                                                                              #
################################################################################

#   If the help file is requested, give it, and ignore anything else.
if [ $h == "y" ]
then
    cat $helpfile
    exit 0
fi

#   Check if there's a command in $1. If there is, go through the list of
#   recognised commands, executing the relevant code. If the command isn't
#   recognised, or it isn't present, exit with helpful error text.
if [ ! $1 ]
then
    #   Idiotproofing in case no command given in $1
    echo "Error: No command given."
    echo $helpstring
    exit 1

#elif [ $1 == '-h' ] || [ $1 == '--help' ]
#then
#    #   Print help text if it's asked for. Yes, this is an option, but I'm
#    #   treating it like a command because it overrides everything anyway.
#    cat $helpfile

elif [ $1 == 'check' ]
then
    #   Search the queue for jobs made by $USER. Print them in pretty format
    squeue -o "$queuestring" -u $USER

elif [ $1 == 'clear' ]
then
    #   Search the queue for job IDs made by $USER. Feeds them into scancel
    echo "Canceling jobs:" > /dev/stderr
    squeue -u $USER -h -o "%i %j" \
        | tee /dev/stderr \
        | awk '{print $1}' \
        | xargs scancel

elif [ $1 == 'oneliner' ]
then
    #   Check if there's a command to pass in $2, and nothing else after it
    if [ -z "$2" ]
    then
        echo "Error: No command passed to oneliner script."
        echo $helpstring
        exit 3
    elif [ -n "$3" ]
    then
        echo "Error: either the command you want to pass to the scheduler is"
        echo "not in double quotes, or more than one command was passed."
        exit 4
    fi

    #   Find oneliner script. If it's there, execute it.
    olscr="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"/lib/oneliner
    if [ -f $olscr ]
    then
        $olscr "$2"
    else
        echo "Error: oneliner script not found at $olscr."
        echo "Please attempt to reinstall the latest version from Github."
        echo "If error persists, please contact the devs."
    fi

elif [ $1 == 'searchanddel' ]
then
    #   Check if there is a $2. If not, spit an error.
    if [ -z "$2" ]
    then
        echo "Error: no regex given in \$2. See help text below for usage."
        echo $helpstring
        exit 3
    fi

    #   Search the queue for job names and IDs made by $USER.
    #   Check job names/IDs against the Perl regex in $2
    #   Feed matches' IDs into scancel
    echo "Canceling jobs:" > /dev/stderr
    squeue -u $USER -h -o "%i %j" \
        | perl -n -e 'print if m/$2/' \
        | tee /dev/stderr \
        | awk '{print $1}' \
        | xargs scancel

elif [ $1 == 'watch' ]
then
    #   Clear the terminal, then read the queue for $USER's jobs every 2 min.
    while true
    do
	    printf "\033c"
	    echo
	    date
        squeue -o "$queuestring" -u $USER
	    sleep 120
    done

else
    #   If the command in $1 hasn't been funneled into the if statements above
    echo "Error: Unrecognised command \"$1\"."
    echo $helpstring
    exit 2
fi

################################################################################
#                                                                              #
#   Error codes
#   =======================================================
#   1   No primary command in $1
#   2   Unrecognised primary command in $1
#   3   Missing value in $2
#   4   Unexpected value in $3 (under searchanddel)
#   100 Version of getopt in environment not compatible with this script
#   101 I don't know what this does, but there's an exit status associated
#   102 Unrecognised arguments in the getopt section
#                                                                              #
################################################################################
